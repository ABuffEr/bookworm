Wagtail ‘TumblrField’ spec
Motivation
A common requirement for Wagtail sites is the ability to create ‘freeform’ content consisting of different content types arranged in any order: headings, paragraphs, images, video, and potentially others, including custom types specific to that site. The current go-to solution for this is the rich text area, but this is undesirable for several reasons:

This spec proposes a new mechanism provisionally named TumblrField, inspired by Wagtail’s existing ‘InlinePanel’ model along with Sir Trevor and Tumblr, which allows editing freeform content as a sequence of interchangeable content blocks.

Functionality
A page type incorporating a TumblrField might be defined like this (NB names and syntax are subject to change):


Here {% tumblrfield %} and {% blocktype %} are custom tags that act as a kind of switch/case statement, invoking the appropriate section for each content block in the sequence depending on its type.

Wagtail site implementers will be able to create custom block types. We will provide a number of abstract 'block type' base classes on top of which developers will be able to implement block-specific behaviours, such as: the rendering of the field(s) within the edit form; form validation; the block's default HTML rendering; the way it is serialised and deserialised to and from JSON; and the styling of the button within the TumblrField's toolbar.
Development notes
The API required for block types somewhat resembles Wagtail's existing EditHandler API, and Django's form field API. It may be that one or the other of these is a close enough fit for us to use it as-is, or can be extended to fit our needs; alternatively, we may create a new API inspired by these.

